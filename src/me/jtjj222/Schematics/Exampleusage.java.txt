package me.jtjj222.Schematics;

import java.io.File;
import java.io.IOException;

import net.minecraft.server.Packet53BlockChange;

import org.bukkit.World;
import org.bukkit.command.Command;
import org.bukkit.command.CommandSender;
import org.bukkit.craftbukkit.entity.CraftPlayer;
import org.bukkit.entity.Player;
import org.bukkit.plugin.java.JavaPlugin;

public class Schematics extends JavaPlugin {

	public boolean onCommand(CommandSender sender, Command cmd, String label, String[] args) {
				
		if (sender instanceof Player && args.length == 3) {
			
			String command = args[0];
			
			Player p = (Player) sender;
			World world = p.getWorld();
			int startX = (int) p.getLocation().getX();
			int startY = (int) p.getLocation().getY();
			int startZ = (int) p.getLocation().getZ();
			
			String mode = args[1];
			
			String uid = args[2];
			File file = new File(this.getDataFolder().getAbsolutePath() + File.separatorChar + uid + ".schematic");
			
			
			if (mode.equalsIgnoreCase("url")&& (sender.hasPermission("schematics.url") || sender.isOp())) {
				
				if (file.isFile()) {
					try {
						file.createNewFile();
					} catch (IOException e) {
						die(e);
						return false;
					}
					if (command.equalsIgnoreCase("import")) loadFromFile(file, world, startX, startY, startZ);
					else if (command.equalsIgnoreCase("preview")) loadFromFile(file,p);
				} else {
					loadFromUrl(file,uid, world, startX, startY, startZ);
				}
			}
			
			else if (mode.equalsIgnoreCase("file") && (sender.hasPermission("schematics.file") || sender.isOp())) {
				if (command.equalsIgnoreCase("import")) loadFromFile(file, world, startX, startY, startZ);
				else if (command.equalsIgnoreCase("preview")) loadFromFile(file,p);
			} 
			
			else {
				
			}
			
			return true;
		}
		
		else {
			return false;
		}
	}

	private void die(IOException e) {
		e.printStackTrace();		
	}

	private void loadFromUrl(File file, String uid, World world, int startX, int startY, int startZ) {
		try {
			if (downloadFile(getUrlFromUid(uid),file)) loadFromFile(file, world, startX, startY, startZ);
		} catch (IOException e) {
			die(e);
			return;
		}		
		return;
	}

	private void loadFromFile(File file, World world, int startX, int startY, int startZ) {
		SchematicsManager man = new SchematicsManager();
		try {
			man.loadGzipedSchematic(file);
			
			int width = man.getWidth();
			int height = man.getHeight();
			int length = man.getLength();
			
			int endy = startY + height;
			
			for (int x = 0; x < width; x++) {
				for (int z = 0; z < length; z++) {
					int realX = x + startX;
					int realZ = z + startZ;
					
					for (int y = startY; y<=endy && y <255; y++) {
						
						int rely = y - startY;
						int id = man.getBlockIdAt(x, rely, z);
						byte data = man.getMetadataAt(x, rely, z);
						
						if (id != -1) world.getBlockAt(realX, y, realZ).setTypeId(id); // if it isn't transparent
						if (id != -1) world.getBlockAt(realX, y, realZ).setData(data);
					}
				}
			}
			
		} catch (IOException e) {
			die(e);
			return;
		}		
	}
	
	//only send block update packets
	private void loadFromUrl(File file, String uid, Player p) {
		try {
			if (downloadFile(getUrlFromUid(uid),file)) loadFromFile(file, p);
		} catch (IOException e) {
			die(e);
			return;
		}		
		return;
	}

	private void loadFromFile(File file, Player p) {
		
		int startX = (int) p.getLocation().getX();
		int startY = (int) p.getLocation().getY();
		int startZ = (int) p.getLocation().getZ();
		
		SchematicsManager man = new SchematicsManager();
		try {
			man.loadGzipedSchematic(file);
			
			int width = man.getWidth();
			int height = man.getHeight();
			int length = man.getLength();
			
			int endy = startY + height;
			
			for (int x = 0; x < width; x++) {
				for (int z = 0; z < length; z++) {
					int realX = x + startX;
					int realZ = z + startZ;
					
					for (int y = startY; y<=endy && y <255; y++) {
						
						int rely = y - startY;
						int id = man.getBlockIdAt(x, rely, z);
						byte data = man.getMetadataAt(x, rely, z);
						
						Packet53BlockChange packet = new Packet53BlockChange();
						
						packet.lowPriority = true;
						packet.a = realX;
						packet.b = y;
						packet.c = realZ;
						
						if (id != -1) packet.material = id; // if it isn't transparent
						if (id != -1) packet.data = data;
						
						(((CraftPlayer)p).getHandle()).netServerHandler.sendPacket(packet);
					}
				}
			}
			
		} catch (IOException e) {
			die(e);
			return;
		}		
	}

	public boolean downloadFile(String url, File file) throws IOException {
		return false;
	}
	
	private String getUrlFromUid(String uid) {
		return "https://dl.dropbox.com/u/12637402/"+uid+".schematic";
	}
	
}
